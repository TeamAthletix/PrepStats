-- Phase 2.1 Monetization M1: DB scaffolding for beta onboarding

-- 0) Optional: track beta testers (onboard ~100 testers)
CREATE TABLE IF NOT EXISTS public.beta_testers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  role TEXT NOT NULL, -- 'athlete'|'parent'|'coach'|'media'
  invited_at timestamptz NOT NULL DEFAULT now(),
  status TEXT NOT NULL DEFAULT 'pending' -- 'pending'|'active'
);

-- 1) token_items (pricing and item definitions)
CREATE TABLE IF NOT EXISTS public.token_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  type TEXT NOT NULL,              -- 'spotlight' | 'ad_banner' | 'vote' | etc
  cost_tokens INTEGER NOT NULL,
  description TEXT,
  duration_days INTEGER,
  active BOOLEAN DEFAULT TRUE,
  created_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_token_items_name ON public.token_items(name);

-- 2) token_accounts (wallet per user)
CREATE TABLE IF NOT EXISTS public.token_accounts (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  balance INTEGER NOT NULL DEFAULT 0,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

-- 3) token_purchases
CREATE TABLE IF NOT EXISTS public.token_purchases (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  tokens INTEGER NOT NULL,
  amount_currency TEXT,
  amount_value NUMERIC,
  stripe_session_id TEXT,
  purchased_at timestamptz NOT NULL DEFAULT now()
);

-- 4) token_spends
CREATE TABLE IF NOT EXISTS public.token_spends (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  item_id BIGINT REFERENCES public.token_items(id) ON DELETE SET NULL,
  tokens_spent INTEGER NOT NULL,
  activity_id TEXT,
  created_at timestamptz NOT NULL DEFAULT now()
);

-- 5) freebies: team and org (free allocations)
CREATE TABLE IF NOT EXISTS public.spotlight_free_allocations_team (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  team_id BIGINT NOT NULL,
  allocated_at timestamptz NOT NULL DEFAULT now(),
  consumed BOOLEAN DEFAULT FALSE,
  consumed_at timestamptz
);
CREATE INDEX IF NOT EXISTS idx_sfree_team_team ON public.spotlight_free_allocations_team(team_id);

CREATE TABLE IF NOT EXISTS public.spotlight_free_allocations_org (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  org_id BIGINT NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  allocated_at timestamptz NOT NULL DEFAULT now(),
  consumed BOOLEAN DEFAULT FALSE,
  consumed_at timestamptz
);
CREATE INDEX IF NOT EXISTS idx_sfree_org_org ON public.spotlight_free_allocations_org(org_id);

-- 6) Spotlight edits ledger
CREATE TABLE IF NOT EXISTS public.spotlight_edits (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  athlete_user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_by_uuid UUID NOT NULL REFERENCES auth.users(id) ON DELETE SET NULL,
  org_id BIGINT REFERENCES public.organizations(id) ON DELETE SET NULL,
  team_id BIGINT REFERENCES public.teams(id) ON DELETE SET NULL,
  type TEXT NOT NULL DEFAULT 'spotlight',
  pinned BOOLEAN DEFAULT FALSE,
  created_at timestamptz NOT NULL DEFAULT now(),
  expires_at timestamptz,
  share_url TEXT
);
CREATE INDEX IF NOT EXISTS idx_spotlight_edits_athlete ON public.spotlight_edits(athlete_user_id);
CREATE INDEX IF NOT EXISTS idx_spotlight_edits_by_creator ON public.spotlight_edits(created_by_uuid);
CREATE INDEX IF NOT EXISTS idx_spotlight_edits_org ON public.spotlight_edits(org_id);

-- 7) Ensure a Spotlight Edit token item exists
DO $$ BEGIN
  IF NOT EXISTS (SELECT 1 FROM public.token_items WHERE name = 'Spotlight Edit' AND type = 'spotlight') THEN
    INSERT INTO public.token_items (name, type, cost_tokens, description, duration_days, active)
    VALUES ('Spotlight Edit', 'spotlight', 60, 'Token-based Spotlight Edit with optional pin/share', 7, true);
  END IF;
END $$;
